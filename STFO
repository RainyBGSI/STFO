local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "STFO Fast Case Opener",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading...",
   LoadingSubtitle = "STFO Script",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local caseList = {
    ["Beginner Case"] = "Case_1",
    ["Vengful Case"] = "Case_2",
    ["Void Case"] = "Case_3",
    ["RGB Toy Case"] = "Case_4",
    ["The Rock Family"] = "Case_5",
    ["Crystallic Treasures"] = "Case_6",
    ["A Sheriff's Equipment!"] = "Case_7",
    ["Neo Neo Tempus"] = "Case_8",
    ["Burried Treasure"] = "Case_9",
    ["Negative Degrees"] = "Case_10",
    ["My Camping Equipment"] = "Case_11",
    ["Sunday Delight"] = "Case_12",
    ["Shroooooooms"] = "Case_13",
    ["Sakura Case"] = "Case_14",
    ["Volcanic Case"] = "Case_15",
    ["Toy Box"] = "Case_16",
    ["Stealing From The Gods"] = "Case_17",
    ["Case_18"] = "Case_18",
    ["Neon Red Dilemma"] = "Kill_Case_1",
    ["The Lost Souls"] = "Kill_Case_2",
    ["Burning Souls"] = "Kill_Case_3",
    ["X Marks The Spot"] = "Kill_Case_4",
    ["Shiny Rocks"] = "Diamond_Case_1",
    ["Neo Neo Crazy"] = "Diamond_Case_2",
    ["Diamond_Case_3"] = "Diamond_Case_3",
    ["Green or Pink?"] = "Diamond_Case_4",
    ["Freeeee"] = "Free_Case_1",
    ["The Lost Treasure"] = "Free_Case_2",
}

local selectedCaseValue = nil

local isAutoOpeningCase = false

local Tab = Window:CreateTab("Cases", "briefcase") -- Title, Image

local Section = Tab:CreateSection("Fast Case Exploit")

local Dropdown = Tab:CreateDropdown({
   Name = "Select Case",
   Options = {"Beginner Case",
            "Vengful Case",
            "Void Case",
            "RGB Toy Case",
            "The Rock Family",
            "Crystallic Treasures",
            "A Sheriff's Equipment!",
            "Neo Neo Tempus",
            "Burried Treasure",
            "Negative Degrees",
            "My Camping Equipment",
            "Sunday Delight",
            "Shroooooooms",
            "Sakura Case",
            "Volcanic Case",
            "Toy Box",
            "Stealing From The Gods",
            "Case_18",
            "Neon Red Dilemma",
            "The Lost Souls",
            "Burning Souls",
            "X Marks The Spot",
            "Shiny Rocks",
            "Neo Neo Crazy",
            "Diamond_Case_3",
            "Green or Pink?",
            "Freeeee",
            "The Lost Treasure",
        },
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
            selectedCaseValue = caseList
        end
})

local Divider = Tab:CreateDivider()

local Toggle = Tab:CreateToggle({
   Name = "Enable Auto Open",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
            isAutoOpeningCase = Value
            while isAutoOpeningCase do
                if selectedCaseValue then
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("OpenCase"):FireServer(selectedCaseValue)
                    task.wait()
                end
            end
   end
})
